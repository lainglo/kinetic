import datetime

from django.utils import timezone
from django.test import TestCase
from django.core.urlresolvers import reverse
from polls.models import Poll

class PollMethodTests(TestCase):

    def test_was_published_recently_with_future_poll(self):
        """
        was_published_recently() should return False for polls whose
        pub_date is in the future
        """
        future_poll = Poll(pub_date=timezone.now() + datetime.timedelta(days=30))
        self.assertEqual(future_poll.was_published_recently(), False)

    def test_was_published_recently_with_old_poll(self):
   	 """
    	 was_published_recently() should return False for polls whose pub_date
    	 is older than 1 day
   	 """
    	 old_poll = Poll(pub_date=timezone.now() - datetime.timedelta(days=30))
    	 self.assertEqual(old_poll.was_published_recently(), False)

    def test_was_published_recently_with_recent_poll(self):
   	 """
    	 was_published_recently() should return True for polls whose pub_date
    	 is within the last day
    	 """
    	 recent_poll = Poll(pub_date=timezone.now() - datetime.timedelta(hours=1))
    	 self.assertEqual(recent_poll.was_published_recently(), True)

    def create_poll(question,days):
	"""Creates a poll with a given 'question' published the given number of 
	days offset to now (negative for polls published in the past, 
	positive for polls yet to be published"""
	return Poll.objects.create(question=question, pub_date=timezone.now()+datetime.timedelta(days=days))

class PollViewTests(TestCase):
    def test_index_view_with_no_polls(self):
	'''
	If no polls exist, an appropriate message should be displayed.
	'''
	response = self.client.get(reverse('polls:index')) #how does this work if client = Client() was not defined anywhere?
	self.assertEqual(response.status_code,200)
	self.assertContains(response,"No polls are available.")
	self.assertQuerySetEqual(response.context['latest_poll_list'],[])

    def test_index_with_a_past_poll(self):
	'''
	Polls with a pub_date in the past should be displayed on the index page.
	'''
	create_poll(question="Past poll.",days=-30)
	response = self.client.get(reverse('polls.index'))
	self.assertQueryEqual(
		response.context['latest_poll_list'],
		['<Poll:Past poll.>']
	)
	
    def test_index_view_with_a_future_poll(self):
	'''
	Polls with a pub_date in the future should not be displayed on the
	index page.
	'''
	create_poll(question="Future poll.",days=30)
	response = self.client.get(reverse('polls:index'))
        self.assertContains(response, "No polls are available.", status_code=200)
        self.assertQuerysetEqual(response.context['latest_poll_list'], [])

    def test_index_view_with_future_poll_and_past_poll(self):
        """
        Even if both past and future polls exist, only past polls should be
        displayed.
        """
        create_poll(question="Past poll.", days=-30)
        create_poll(question="Future poll.", days=30)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_poll_list'],
            ['<Poll: Past poll.>']
        )

    def test_index_view_with_two_past_polls(self):
        """
        The polls index page may display multiple polls.
        """
        create_poll(question="Past poll 1.", days=-30)
        create_poll(question="Past poll 2.", days=-5)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_poll_list'],
             ['<Poll: Past poll 2.>', '<Poll: Past poll 1.>']
        )

	
class PollIndexDetailTests(TestCase):
    def test_detail_view_with_a_future_poll(self):
	"""
	The detail view of a poll with a pub_date in the future should 
	return a 404 not found.
	"""
        future_poll = create_poll(question='Future poll.', days=5)
        response = self.client.get(reverse('polls:detail', args=(future_poll.id,)))
        self.assertEqual(response.status_code, 404)

    def test_detail_view_with_a_past_poll(self):
        """
        The detail view of a poll with a pub_date in the past should display
        the poll's question.
        """
        past_poll = create_poll(question='Past Poll.', days=-5)
        response = self.client.get(reverse('polls:detail', args=(past_poll.id,)))
        self.assertContains(response, past_poll.question, status_code=200)

Ideas for more tests¶

We ought to add a similar get_queryset method to ResultsView and create a new test class for that view. It’ll be very similar to what we have just created; in fact there will be a lot of repetition.

We could also improve our application in other ways, adding tests along the way. For example, it’s silly that Polls can be published on the site that have no Choices. So, our views could check for this, and exclude such Polls. Our tests would create a Poll without Choices and then test that it’s not published, as well as create a similar Poll with Choices, and test that it is published.

Perhaps logged-in admin users should be allowed to see unpublished Polls, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it.

At a certain point you are bound to look at your tests and wonder whether your code is suffering from test bloat, which brings us to:
When testing, more is better¶

It might seem that our tests are growing out of control. At this rate there will soon be more code in our tests than in our application, and the repetition is unaesthetic, compared to the elegant conciseness of the rest of our code.

It doesn’t matter. Let them grow. For the most part, you can write a test once and then forget about it. It will continue performing its useful function as you continue to develop your program.

Sometimes tests will need to be updated. Suppose that we amend our views so that only Polls with Choices are published. In that case, many of our existing tests will fail - telling us exactly which tests need to be amended to bring them up to date, so to that extent tests help look after themselves.

At worst, as you continue developing, you might find that you have some tests that are now redundant. Even that’s not a problem; in testing redundancy is a good thing.

As long as your tests are sensibly arranged, they won’t become unmanageable. Good rules-of-thumb include having:

    a separate TestClass for each model or view
    a separate test method for each set of conditions you want to test
    test method names that describe their function

Further testing¶

This tutorial only introduces some of the basics of testing. There’s a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things.

For example, while our tests here have covered some of the internal logic of a model and the way our views publish information, you can use an “in-browser” framework such as Selenium to test the way your HTML actually renders in a browser. These tools allow you to check not just the behavior of your Django code, but also, for example, of your JavaScript. It’s quite something to see the tests launch a browser, and start interacting with your site, as if a human being were driving it! Django includes LiveServerTestCase to facilitate integration with tools like Selenium.

If you have a complex application, you may want to run tests automatically with every commit for the purposes of continuous integration, so that quality control is itself - at least partially - automated.

A good way to spot untested parts of your application is to check code coverage. This also helps identify fragile or even dead code. If you can’t test a piece of code, it usually means that code should be refactored or removed. Coverage will help to identify dead code. See Integration with coverage.py for details.

Testing in Django has comprehensive information about testing.
What’s next?¶

For full details on testing, see Testing in Django.

When you’re comfortable with testing Django views, read part 6 of this tutorial to learn about static files management.
Writing your first Django app, part 4
Writing your first Django app, part 6
Additional Information
Search: 
